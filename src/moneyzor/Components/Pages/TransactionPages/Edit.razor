@page "/transactions/edit"
@using Microsoft.EntityFrameworkCore
@using moneyzor.Entities
@inject IDbContextFactory<moneyzor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Transaction</h2>
<hr />
@if (Transaction is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Transaction" OnValidSubmit="UpdateTransaction" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input type="hidden" name="Transaction.Id" value="@Transaction.Id" />
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Transaction.Description" class="form-control" />
                <ValidationMessage For="() => Transaction.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="amount" class="form-label">Amount:</label>
                <InputNumber id="amount" @bind-Value="Transaction.Amount" class="form-control" />
                <ValidationMessage For="() => Transaction.Amount" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Transaction.Date" class="form-control" />
                <ValidationMessage For="() => Transaction.Date" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="categoryid" class="form-label">CategoryId:</label>
                <InputNumber id="categoryid" @bind-Value="Transaction.CategoryId" class="form-control" />
                <ValidationMessage For="() => Transaction.CategoryId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type:</label>
                <InputSelect id="type" @bind-Value="Transaction.Type" class="form-control" />
                <ValidationMessage For="() => Transaction.Type" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>
}

<div>
    <a href="/transactions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Transaction? Transaction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Transaction ??= await context.Transaction.FirstOrDefaultAsync(m => m.Id == Id);

        if (Transaction is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTransaction()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Transaction!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TransactionExists(Transaction!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/transactions");
    }

    private bool TransactionExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Transaction.Any(e => e.Id == id);
    }
}
